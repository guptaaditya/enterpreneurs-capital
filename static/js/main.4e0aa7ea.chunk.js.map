{"version":3,"sources":["components/container/index.js","utils.js","components/business/purchasebusiness.js","components/business/runbusiness.js","components/business/index.js","components/reset/index.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Container","this","props","className","children","React","PureComponent","toIntNotation","number","stringified","toString","length","Math","pow","toFixed","toLocaleString","storage","export","storageKey","data","exportAsIs","JSON","stringify","import","importAsIs","output","parse","e","console","log","key","dataString","window","localStorage","setItem","getItem","PurchaseBusiness","state","canInvest","subscriptionChanges","handlePurchaseClick","onPurchase","stateObserver","subscribe","setState","unsubscribe","business","name","branchCost","cost","onClick","classNames","src","width","RunBusiness","isRunEnabled","isRunByManager","progressNode","autoRunBusinessHandler","runBusinessOnceTimer","resetSubscription","handleRef","fillNode","forceUpdate","animationHandler","classList","remove","setTimeout","add","animationStop","generateRevenue","onRevenue","revenueBusinessGenerates","handleRunBusiness","isStarted","time","handleAutoStartBusiness","clearTimeout","setInterval","_","debounce","leading","trailing","resetObserver","hasReset","clearInterval","nextProps","hasManager","icon","businessProps","noop","ref","style","animationDuration","animationIterationCount","Business","handleBusinessUpgrade","canUpgrade","upgradeBusiness","id","handleBuyMore","buyBranch","handleHireManager","hireManager","canHireManager","getCapital","managerCost","Boolean","upgradeCost","canBuyMore","isUpgraded","branchCount","isPurchased","upgradePromotionText","managerIcon","unitName","showManager","showBuyMore","showUpgrade","Reset","onReset","REVENUE_MULTIPLIER_AT_UPGRADE","INCREASE_IN_BRANCH_COST_PERCENT","INITIAL_CAPITAL","observerFactory","observersList","creator","observer","push","observerIndex","publisher","args","forEach","o","next","stateChangeObserver","App","owner","capital","businesses","businessList","setStateAndPublishChanges","handler","exportData","onGetCapital","getBusinessById","businessBoughtIndex","findIndex","b","Object","assign","onBuyBranch","businessBought","revenue","businessCostIncrease","floor","handleReset","addCapital","onInvestCapital","newState","loadData","userData","timeOfExit","Date","getTime","timeUserStayedAway","capitalGenerated","filter","reduce","acc","nextBusiness","commonBusinessProps","investCapital","Observable","create","businessesView","map","index","role","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e0aa7ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './container.css';\r\n\r\nexport default class Container extends React.PureComponent {\r\n    render() {\r\n        const { className, children } = this.props;\r\n        return (\r\n            <div className={className}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}","export function addNumbers(num1,num2) {\r\n    let a = num1.toString().split(\"\").map(Number).reverse();\r\n    let b = num2.toString().split(\"\").map(Number).reverse();\r\n    let ret = [];\r\n    let carry = 0;\r\n    let i = 0;\r\n    if (a.length > b.length)\r\n      return addNumbers(num2,num1);\r\n\r\n    for (i = 0; i < a.length; i++) {\r\n      let t = a[i] + b[i] + carry;\r\n      ret[i] = t % 10;\r\n      carry = (t > 9 ? 1 : 0);\r\n    }\r\n    while (i < b.length)\r\n    {\r\n      let t = b[i] + carry;\r\n      ret[i++] = t % 10;\r\n      carry = (t > 9 ? 1 : 0);\r\n    }\r\n    if (carry === 1) ret[i] = 1;\r\n    return ret.reverse().join(\"\");\r\n};\r\nexport function toIntNotation(number) {\r\n  let stringified = number.toString();\r\n  // if (stringified.length >= 10 && stringified.length < 13) {\r\n  if (stringified.length >= 10) {\r\n      return ((number/Math.pow(10,9)).toFixed(3).toLocaleString('en') + ' Billion');\r\n  } else if (stringified.length >= 13) {\r\n      return ((number/Math.pow(10,12)).toFixed(3).toLocaleString('en') + ' Trillion');\r\n  }\r\n  return number.toLocaleString('en');\r\n};\r\n\r\nexport const storage = {\r\n  export: function (storageKey, data) {\r\n    this.exportAsIs(storageKey, JSON.stringify(data))\r\n  },\r\n  import: function (storageKey) {\r\n    const data = this.importAsIs(storageKey);\r\n    let output = null;\r\n    if (data) {\r\n      try {\r\n        output = JSON.parse(data);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    return output;\r\n  },\r\n  exportAsIs: (key, dataString) => window.localStorage.setItem(key, dataString),\r\n  importAsIs: (key) => window.localStorage.getItem(key),\r\n};\r\n","import React from 'react';\r\nimport './business.css';\r\nimport Container from '../container';\r\nimport classNames from 'classnames';\r\nimport { toIntNotation } from '../../utils';\r\n\r\nexport default class PurchaseBusiness extends React.PureComponent {\r\n\r\n    state = {\r\n        canInvest: false,\r\n    };\r\n\r\n    subscriptionChanges = null;\r\n\r\n    componentDidMount() {\r\n        const { canInvest, stateObserver } = this.props;\r\n        this.subscriptionChanges = stateObserver.subscribe(() => {\r\n            this.setState({ canInvest: canInvest() });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.subscriptionChanges && this.subscriptionChanges.unsubscribe();\r\n    }\r\n\r\n    handlePurchaseClick = () => {\r\n        const { onPurchase } = this.props;\r\n        onPurchase();\r\n    };\r\n\r\n    render() {\r\n        const { business: { name, cost: branchCost } = {} } = this.props;\r\n        const { canInvest } = this.state;\r\n        return (\r\n            <fieldset>\r\n                <legend><h3 className=\"display-inline\">{name}</h3></legend>\r\n                <hr className=\"ruler\" />\r\n                <div className=\"row\">\r\n                    <div className=\"col purchase-business\" onClick={this.handlePurchaseClick}>\r\n                        <span className={classNames(\"c2a\", {\"disabled\": !canInvest })}>\r\n                            Buy for <span className=\"currency\">${toIntNotation(branchCost)}</span>\r\n                            &nbsp;\r\n                        </span>\r\n                        <img className=\"encircle\" src=\"/img/invest.svg\" width=\"25\" />\r\n                    </div>\r\n                </div>\r\n            </fieldset>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport _ from 'lodash';\r\nimport classNames from 'classnames';\r\nimport Container from '../container';\r\n\r\nexport default class RunBusiness extends React.PureComponent {\r\n    state = {\r\n        isRunEnabled: true,\r\n    };  \r\n\r\n    isRunByManager = false;\r\n\r\n    progressNode = null;\r\n    \r\n    autoRunBusinessHandler = null; \r\n\r\n    runBusinessOnceTimer = null;\r\n\r\n    resetSubscription = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.handleRunBusiness = _.debounce(this.handleRunBusiness, 100, { leading: false, trailing: true });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { resetObserver } = this.props;\r\n        this.resetSubscription = resetObserver.subscribe((hasReset) => {\r\n            if (hasReset && this.autoRunBusinessHandler) {\r\n                clearInterval(this.autoRunBusinessHandler);\r\n                this.resetSubscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.resetSubscription) this.resetSubscription.unsubscribe();\r\n        if (this.autoRunBusinessHandler) clearInterval(this.autoRunBusinessHandler);\r\n        if (this.runBusinessOnceTimer) clearTimeout(this.runBusinessOnceTimer);\r\n    }\r\n\r\n    componentWillUpdate(nextProps) {\r\n        const { business: { hasManager } = {} } = nextProps;\r\n        if (hasManager && !this.isRunByManager && this.progressNode) {\r\n            this.isRunByManager = true;\r\n            this.handleAutoStartBusiness();\r\n        }\r\n    }\r\n\r\n    handleRef = (fillNode) => {\r\n        this.progressNode = fillNode;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    animationHandler = () => {\r\n        if (!this.progressNode) return;\r\n        this.progressNode.classList.remove('fill')\r\n        setTimeout(() => this.progressNode.classList.add('fill'), 0);\r\n    };\r\n\r\n    animationStop = () => {\r\n        this.progressNode.classList.remove('fill')\r\n    };\r\n\r\n    generateRevenue = () => {\r\n        const { onRevenue, business: { revenueBusinessGenerates } } = this.props;\r\n        onRevenue(revenueBusinessGenerates);\r\n    }\r\n\r\n    handleRunBusiness = () => {\r\n        if (this.isRunByManager === true) return;\r\n        if (this.isStarted === true) return;\r\n        this.isStarted = true;\r\n        const { business: { time } = {} } = this.props;\r\n        this.animationHandler();\r\n        this.setState({ isRunEnabled: false });\r\n        this.runBusinessOnceTimer = setTimeout(() => {\r\n            this.generateRevenue();\r\n            this.isStarted = false;\r\n            this.setState({ isRunEnabled: true });\r\n            this.animationStop();\r\n        }, time);\r\n    }\r\n\r\n    handleAutoStartBusiness = () => {\r\n        clearTimeout(this.runBusinessOnceTimer);\r\n        this.setState({ isRunEnabled: true });\r\n        const { business: { time } = {} } = this.props;\r\n        this.animationHandler();\r\n        this.autoRunBusinessHandler = setInterval(() => {\r\n            this.generateRevenue();\r\n        }, time);\r\n    }\r\n\r\n    render() {\r\n        const { business: { icon, time, hasManager = false } = {} } = this.props;\r\n        const { isRunEnabled } = this.state;\r\n        const businessProps = {\r\n            onClick: hasManager ? _.noop : this.handleRunBusiness,\r\n        };\r\n        return (\r\n            <>\r\n                <div className=\"col\">\r\n                    <Container className=\"txt-align-right p-r-20\">\r\n                        <img \r\n                            src={icon} width=\"25\" \r\n                            className={classNames(\r\n                                \"encircle c2a runBusiness\", \r\n                                {\"nocursor\": hasManager},\r\n                                {\"hidden\": !isRunEnabled}\r\n                            )} \r\n                            {...businessProps}\r\n                        />\r\n                        <div className=\"progressSlim\">\r\n                            <div ref={this.handleRef}\r\n                                style={{ \r\n                                    animationDuration: `${time}ms`,\r\n                                    animationIterationCount: this.isRunByManager ? 'infinite': 1 \r\n                                }}>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Container>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './business.css';\r\nimport Container from '../container';\r\nimport PurchaseBusiness from './purchasebusiness';\r\nimport RunBusiness from './runbusiness';\r\nimport { toIntNotation } from '../../utils';\r\n\r\nexport default class Business extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isStarted: false,\r\n            canHireManager: false,\r\n            canBuyMore: false,\r\n            canUpgrade: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { stateObserver, business: { hasManager, isUpgraded } } = this.props;\r\n        stateObserver.subscribe(() => {\r\n            if (!hasManager) this.setState({ canHireManager: this.canHireManager() });\r\n            if (!isUpgraded) this.setState({ canUpgrade: this.canUpgrade() });\r\n            this.setState({ canBuyMore: this.canInvest() });\r\n        });\r\n    }\r\n\r\n    handleBusinessUpgrade = () => {\r\n        if (this.canUpgrade()) {\r\n            const { upgradeBusiness, business: { id } } = this.props;\r\n            upgradeBusiness(id);\r\n        }\r\n    }\r\n\r\n    handleBuyMore = () => {\r\n        if (this.canInvest()) {\r\n            const { buyBranch, business: { id } } = this.props;\r\n            buyBranch(id);\r\n        }\r\n    }\r\n\r\n    handleHireManager = () => {\r\n        const { hireManager, business: { hasManager, id } } = this.props;\r\n        if(hasManager === true) return;\r\n        if (this.canHireManager()) {\r\n            hireManager(id);\r\n        }\r\n    }\r\n\r\n    canHireManager = () => {\r\n        const { getCapital, business: { managerCost } = {} } = this.props;\r\n        return Boolean(managerCost <= getCapital());\r\n    }\r\n\r\n    canInvest = () => {\r\n        const {  getCapital, business: { cost } = {} } = this.props;\r\n        return Boolean(cost <= getCapital());\r\n    }\r\n\r\n    canUpgrade = () => {\r\n        const {  getCapital, business: { upgradeCost } = {} } = this.props;\r\n        return Boolean(upgradeCost <= getCapital());\r\n    }\r\n    \r\n    render() {\r\n        const { \r\n            stateObserver,\r\n            resetObserver,\r\n            business: { \r\n                hasManager = false, name, branchCount = 1, isPurchased = false, \r\n                cost, upgradeCost, managerCost, revenueBusinessGenerates, isUpgraded = false,\r\n                upgradePromotionText, managerIcon, unitName\r\n            } = {},\r\n            onRevenue,\r\n        } = this.props;\r\n        const { canHireManager, canBuyMore, canUpgrade } = this.state;\r\n        const showManager = Boolean(hasManager || canHireManager);\r\n        const showBuyMore = canBuyMore;\r\n        const showUpgrade = canUpgrade;\r\n\r\n        return (\r\n            <Container className=\"borderBox\">\r\n                {hasManager && <img className=\"top-right\" src={managerIcon} width=\"30\" />}\r\n                {isPurchased && (\r\n                    <fieldset>\r\n                        <legend>\r\n                            <h3 className=\"display-inline\">{name}</h3> x {branchCount} \r\n                        </legend>\r\n                        <hr className=\"ruler\" />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-2\">\r\n                                <div className=\"txt-align-left p-l-20\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <span onClick={this.handleBuyMore} \r\n                                                className={classNames(\r\n                                                    'buy-more-units c2a', \r\n                                                    {'disabled': !showBuyMore}, \r\n                                                    {'blink-image': showBuyMore}\r\n                                                )}\r\n                                            >\r\n                                                Buy next {unitName} for <span className=\"currency\">${toIntNotation(cost)}</span>\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                    {!hasManager && (\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col\">\r\n                                                <Container>\r\n                                                    <span\r\n                                                        className={classNames(\r\n                                                            'c2a', {'disabled': !showManager}, \r\n                                                            {'blink-image': showManager}\r\n                                                        )}\r\n                                                        onClick={this.handleHireManager} \r\n                                                    >\r\n                                                        Hire <img src={managerIcon} width=\"30\" />\r\n                                                        for <span className=\"currency\">${toIntNotation(managerCost)}</span>\r\n                                                    </span>\r\n                                                </Container>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    {!isUpgraded && (\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col\">\r\n                                                <Container>\r\n                                                    <span \r\n                                                        className={classNames(\r\n                                                            'upgrade-business c2a', {'disabled': !showUpgrade}, \r\n                                                            {'blink-image': showUpgrade}\r\n                                                        )}\r\n                                                        onClick={this.handleBusinessUpgrade} \r\n                                                    >\r\n                                                        {upgradePromotionText} -> costs <span className=\"currency\">${toIntNotation(upgradeCost)}</span>\r\n                                                    </span>\r\n                                                </Container>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col txt-align-right p-r-20\">\r\n                                        <span>\r\n                                            + \r\n                                            <span className=\"currency\">\r\n                                                {toIntNotation(revenueBusinessGenerates)}\r\n                                            </span>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <RunBusiness \r\n                                            resetObserver={resetObserver}\r\n                                            business={this.props.business} \r\n                                            onRevenue={onRevenue}\r\n                                        /> \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                )}\r\n                {!isPurchased && (\r\n                    <PurchaseBusiness \r\n                        canInvest={this.canInvest}\r\n                        onPurchase={this.handleBuyMore} \r\n                        business={this.props.business} \r\n                        stateObserver={stateObserver}\r\n                    />\r\n                )}\r\n                </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './reset.css';\r\n\r\nexport default function Reset(props) {\r\n    return (<div onClick={props.onReset} className=\"reset top-right\">\r\n        <img src=\"/img/reset.svg\" width=\"40\" />\r\n    </div>);\r\n}","export const REVENUE_MULTIPLIER_AT_UPGRADE = 3;\r\nexport const INCREASE_IN_BRANCH_COST_PERCENT = 4;\r\nexport const APP_KEY = 'enterpreneurs-capital';\r\nexport const INITIAL_CAPITAL = 10000050;","import React from 'react';\nimport { Observable, interval } from 'rxjs';\nimport { throttle } from 'rxjs/operators';\nimport './App.css';\nimport Container from './components/container';\nimport Business from './components/business';\nimport Reset from './components/reset';\nimport { storage, toIntNotation } from './utils';\n\nimport businessList from './data/businesses.json';\n\nimport { \n  REVENUE_MULTIPLIER_AT_UPGRADE, INCREASE_IN_BRANCH_COST_PERCENT, APP_KEY, INITIAL_CAPITAL,\n} from './constants';\n\nfunction observerFactory() {\n  const observersList = [];\n  return {\n    creator: function(observer) { \n      observersList.push(observer);\n      const observerIndex = observersList.length - 1;\n      return () => observersList[observerIndex] = null;\n    },\n    publisher: (...args) => {\n      observersList.forEach(o => {\n        if (o) o.next(...args)\n      });\n    },\n  };\n};\n\nconst stateChangeObserver = observerFactory();\nconst resetObserver = observerFactory();\n\nexport default class App extends React.PureComponent {\n  state = {\n    owner: {\n      capital: INITIAL_CAPITAL,\n      businesses: businessList,\n    },\n  };\n  \n  stateChangeObserver = null;\n  resetObserver = null;\n\n  componentDidMount() {\n    const newState = this.loadData();\n\n    if(newState) {\n      this.setStateAndPublishChanges(newState);\n    } else {\n      stateChangeObserver.publisher();\n    }\n  }\n\n  exportData() {\n    const { owner: { capital, businesses } = {} } = this.state;\n    const timeNow = new Date().getTime();\n    const userData = {\n      timeOfExit: timeNow,\n      businesses: [...businesses],\n      capital,\n    };\n    storage.export(APP_KEY, userData);\n    return true;\n  }\n\n  loadData() {\n    const userData = storage.import(APP_KEY);\n    if(userData && userData.businesses && userData.timeOfExit) {\n      const timeNow = new Date().getTime();\n      const timeUserStayedAway = timeNow - userData.timeOfExit;\n      const runningBusiness = userData.businesses.filter(b => b.hasManager);\n      const capitalGenerated  = runningBusiness.reduce((acc, nextBusiness) => {\n        return acc + (nextBusiness.revenueBusinessGenerates * (timeUserStayedAway/nextBusiness.time));\n      }, 0);\n      const totalCapital = Math.floor(capitalGenerated + (userData.capital || 0));\n      const newState = {\n        owner: {\n          capital: totalCapital,\n          businesses: userData.businesses,\n        }\n      };\n      return newState;\n    }\n    return null;\n  }\n\n  setStateAndPublishChanges = (args, handler) => {\n    this.setState(args, () => {\n      (handler || stateChangeObserver.publisher)(this.state);\n      this.exportData();\n    });\n  }\n\n  onGetCapital = () => {\n    return this.state.owner.capital;\n  }\n\n  getBusinessById = (id, businesses) => {\n    const businessBoughtIndex = businesses.findIndex(b => b.id === id);\n    const businessBought = Object.assign({}, businesses[businessBoughtIndex]);\n    return businessBought;\n  }\n\n  onBuyBranch = (id) => {\n    const businesses = [...this.state.owner.businesses];\n    const businessBoughtIndex = businesses.findIndex(b => b.id === id);\n    const businessBought = Object.assign({}, businesses[businessBoughtIndex]);\n    const { owner } = this.state;\n    if (owner.capital < businessBought.cost) return;\n    let capital = owner.capital - businessBought.cost;\n    const branchCount = (businessBought.branchCount || 0) + 1;\n    businessBought.branchCount = branchCount;\n    businessBought.isPurchased = true;\n    businessBought.revenueBusinessGenerates = businessBought.branchCount * businessBought.revenue;\n    const businessCostIncrease = businessBought.cost * (INCREASE_IN_BRANCH_COST_PERCENT/100);\n    businessBought.cost += Math.floor(businessCostIncrease);\n    businesses[businessBoughtIndex] = businessBought;\n    this.setStateAndPublishChanges({\n      owner: {\n        ...owner,\n        capital,\n        businesses\n      }\n    });\n    return true;\n  }\n\n  handleReset = () => {\n    this.setStateAndPublishChanges({\n      owner: {\n        capital: INITIAL_CAPITAL,\n        businesses: businessList,\n      },\n    }, () => {\n      resetObserver.publisher(true);\n      stateChangeObserver.publisher(false, this.state);\n    });\n  }\n\n  handleHireManager = id => {\n    const businesses = [...this.state.owner.businesses];\n    const businessBoughtIndex = businesses.findIndex(b => b.id === id);\n    const businessBought = Object.assign({}, businesses[businessBoughtIndex]);\n    const { owner } = this.state;\n    if (owner.capital < businessBought.managerCost) return;\n    businessBought.hasManager = true;\n    let capital = owner.capital - businessBought.managerCost;\n    businesses[businessBoughtIndex] = businessBought;\n    this.setStateAndPublishChanges({\n      owner: {\n        ...owner,\n        capital,\n        businesses\n      }\n    });\n    return true;\n  }\n\n  handleBusinessUpgrade = id => {\n    const businesses = [...this.state.owner.businesses];\n    const businessBoughtIndex = businesses.findIndex(b => b.id === id);\n    const businessBought = Object.assign({}, businesses[businessBoughtIndex]);\n    const { owner } = this.state;\n    if (owner.capital < businessBought.upgradeCost) return;\n    businessBought.isUpgraded = true;\n    businessBought.revenue *= REVENUE_MULTIPLIER_AT_UPGRADE;\n    businessBought.revenueBusinessGenerates = businessBought.branchCount * businessBought.revenue;\n    let capital = owner.capital - businessBought.upgradeCost;\n    businesses[businessBoughtIndex] = businessBought;\n    this.setStateAndPublishChanges({\n      owner: {\n        ...owner,\n        capital,\n        businesses\n      }\n    });\n    return true;\n  }\n\n  addCapital = (revenue) => {\n    const { owner } = this.state;\n    let capital = owner.capital + revenue;\n    this.setStateAndPublishChanges({\n      owner: { \n        ...owner,\n        capital \n      }\n    }, () => {\n      stateChangeObserver.publisher(true, this.state);\n    });\n  }\n\n  onInvestCapital = (cost) => {\n      const { owner } = this.state;\n      let capital = owner.capital;\n      if (cost <= capital) {\n        capital -= cost;\n        this.setStateAndPublishChanges({\n          owner: { \n            ...owner,\n            capital \n          }\n        });\n        return true;\n      } else {\n        return false;\n      }\n  }\n\n  render() {\n    const { owner: { businesses, capital } = {} } = this.state;\n\n    const commonBusinessProps = {\n      getCapital: this.onGetCapital,\n      investCapital: this.onInvestCapital,\n      buyBranch: this.onBuyBranch,\n      onRevenue: this.addCapital,\n      hireManager: this.handleHireManager,\n      upgradeBusiness: this.handleBusinessUpgrade,\n    };\n    \n    if (!this.stateChangeObserver) {\n      this.stateChangeObserver = Observable.create(stateChangeObserver.creator);\n    }\n\n    if (!this.resetObserver) {\n      this.resetObserver = Observable.create(resetObserver.creator);\n    }\n\n    const businessesView = businesses.map((b, index) => {\n      return (\n        <div className=\"col\" key={index}>\n          <Business \n            stateObserver={this.stateChangeObserver} \n            resetObserver={this.resetObserver}\n            business={b} {...commonBusinessProps} \n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <div className=\"game\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <Container className=\"border p-btm-15\">\n                <h3>\n                  <span role=\"img\">&#128176;</span>\n                  &nbsp; Available capital <span className=\"currency\">${toIntNotation(capital)}</span>\n                </h3>\n              </Container>\n            </div>\n          </div>\n          <div className=\"row\">{businessesView}</div>\n          <Reset onReset={this.handleReset} />\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}